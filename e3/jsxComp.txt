inside App.js



// we use import keyword for importing react into our project from node_modules
import React from "react";
import ReactDOM from "react-dom/client";
import { jsx } from "react/jsx-runtime";

// React Element - object - it is not an html element
// const heading = React.createElement(
//     "h1",
//     {id:"heading"},
//     "namaste react ðŸš€"
// );
// console.log(heading);    // Object

// JSX - makes it easy to write easy readable code
// JSX is diffrent react is diffrent
// JSX is a html like structure
// JSX is not html inside
// JSX takes care of ingestion attacks - sanitizes the data and prevents cross side scripting for us

// JSX => React.createElement => (using babel) => ReactElement-Js object => HTMLElement(render)

// Single line JSX
// const jsxHeading = <h1 id="heading" className="head"> namaste react using jsx ðŸš€ </h1>;
// console.log(jsxHeading);     // Object

// Multiple line JSX - we have to use paranthesis - because babel needs to understand from where the jsx is starting and where it is ending
const heading = (
  <h1 id="heading" className="head">
    namaste react using jsx ðŸš€
  </h1>
);
console.log(heading);


// React Components
// 2 types of components - 
// Class based components :- old 
// Functional Components :- new 

// React Functional Component - returns some jsx
// const HeadingComponent = ()=>(
//     return <h1>react functional component</h1>;
// )

//same as above function
// const HeadingComp = () => <h1 className="header">Namaste react functional component</h1>;




// React Element
// const Title = (
//     <h1 className="head" tabIndex="5">
//         Namaste React using JSX ðŸš€.
//     </h1>
// )


// React Functional Component
// const Title = ()=>(
//     <h1 className="head" tabIndex="5">
//         Namaste React using title ðŸš€.
//     </h1>
// );

// Component Composition
// const HeadingComponent = ()=>(
//     <div id="container">
//         {/* using another component in this component */ }
//         <Title />
//         <h1 className="heading">namaste react functional component</h1>
//     </div>
// );  



// we can also write components using function and not an arrow function
// but now we have to return it and also curly brackets

// React Functional Component
const Title = function(){
    return(
        <h1 className="head" tabIndex="5">
            Namaste React using title ðŸš€.
        </h1>
    );
};


// but arrow function is a new way of writing a component - always use this 
// Component Composition - using other component inside this component
// inside a curly braces inside the component we can write any piece of javascript 
// even we can call another functional component inside a curly braces
const number = 10000;
const ele = <span>React Element</span>
const HeadingComponent = ()=>(
    <div id="container">
        <h2>{number}</h2>
        {ele}
        {Title()}
        <Title />
        <Title></Title>
        <h1 className="heading">namaste react functional component</h1>
    </div>
);  

// we can write <Title /> or <Title></Title>


// Babel is a package used with parcel - installed when we install parcel, it converts the code of jsx such that react can understand
const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(heading);
root.render(<HeadingComponent />);
